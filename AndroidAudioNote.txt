Linux平台下Android开发环境的搭建
1、java sdk安装
@1、下载
在http://www.oracle.com/us/sun下面下载jdk-6u21-linux-i586.bin（版本可能要变）
下载的时候会提供rpm版本和bin版本，rpm是redhat定义的包管理标准，在Ubuntu下不好使用，最好下载bin
@2、运行
mars@ubuntu:~/Downloads$./jdk-6u21-linux-i586.bin    //一般在网页上直接下载的东西都会存在用户的宿主目录下的Downloads目录下
@3、配置环境变量
mars@ubuntu:~/Downloads$  cd /etc
mars@ubuntu:/etc$ ls -l |grep profile   //etc下面的profile里面包含了环境变量的配置
mars@ubuntu:/etc$ sudo vim profile         //可能需要输入用户mars的登录密码
添加：export:JAVA_HOME=/home/mars/Downloads/jdk1.6.0.21      //jdk的路径
      export:PATH=$PATH:$JAVA_HOME/bin:其他路径         //Linux中环境变量之间用冒号分隔 
      export:CLASSPATH=.
保存退出 
mars@ubuntu:/etc$ java -version   //可以查看java版本号
mars@ubuntu:/etc$ which java      //可以查看java是放在哪个目录下的

2、Android SDK安装
@1、下载android-sdk-linux_x86，解压缩
@2、进入android-sdk-linux_x86文件夹,打开tools文件夹，找到android文件
android文件是一个shell脚本文件，双击直接运行，开始下载不同版本的sdk
@3、进入/android-sdk-linux_x86/platforms,查看是否有下载好的sdk

@4、配置环境变量
mars@ubuntu:/etc$ sudo vim profile            //继续编辑/etc/profile
添加： export:PATH=$PATH:$JAVA_HOME/bin:/home/mars/tools/android-sdk-linux_x86/tools
保存退出
mars@ubuntu:/etc$ adb 或者 which adb  //验证adb命令是否可用或者定位adb工具所在位置

3、eclipse     
@1、在http://www.eclipse.org/downloads/选择Eclipse IDE for Java Developers
下载后解压缩到eclipse文件夹，进入eclipse，双击eclipse文件执行即可
@2、打开eclipse后点击Windows-->preferences-->Android配置SDK目录
@3、代码补全默认快捷键是Alt+/

Android基础知识
1、整个Android被分为四层：
Applications:我们通常开发的应用都在最顶层，向下逐层调用
Application Framework：最基本的API
Libraries (主要是C/C++库）/android runtime
Linux Kernel:主要是驱动（Driver)和管理(Management)

2、Android四大组建
Activity： 程序界面，负责程序中的数据展示
Intent:负责应用程序中数据的传输
Service:在后台实现处理、服务支持的
Content Provider:负责存储数据，并允许有需要的应用程序访问数据

3、ADT(Android Development Tools)是一个eclipse的插件，里面可以设置sdk路径
SDK(Software Development Kit)： 一般是一些被软件工程师用于为特定的软件包、软件框架、硬件平台、操作系统等建立应用软件的开发工具的集合。

4、创建应用
Build Target 选择的小能使得应用在更多版本的系统上适用，Min SDK Version就是能兼容的最低版本
项目目录结构：
|--src:我们编写的原文件
|--gen:eclipse生成的R文件
|--Android 1.6：Android提供的jar文件，包含所有我们所引用的类
|--assets:可以放置任何项目所需要的文件，不会再R文件中生成ID
|--res:存放资源文件，所有资源都会在R文件中生成相对应的ID
    |---drawable-hdpi:高分辨率的图片
    |---drawable-ldpi：低分辨率的图片
    |---drawable-mdpi:中分辨率
|--AndroidManifest.xml       
            //<manifest  >
                   package="包名"
                   android:versionCode="版本号"
                   android:versionName="版本名"
                 <application  android:icon="@drawable/应用图标" android:label="应用名称/标签">
                      <activity android:label="一个页面上的标签" android:name=".MainActivity">
                                          |---Activity页面上ActionBar上显示的名字      |---类名，和包名一起组成应用唯一标识"."不能忘。
                            <intentfilter>                                              
                               <action android:name="android.intent.action.MAIN"/>           //只要intentfilter中有这两句，则
                               <category android:name="android.intent.category.LAUNCHER"/>     这个activity就是应用程序启动时默认最先运行的activity
                            </intentfilter>
                      </activity>
                 </application>
                 <uses-sdk android:minSdkVersion="能兼容的sdk最低版本"/>
              </manifest>
                               
5、Activity初步
@1、一个Activity就是一个类，必须继承android.app.Activity包中的Activity
@2、每个activity都必须要复写onCreate方法，activity第一次运行的时候会调用此方法
    复写方法：在文件中右键--->source--->Override/Implement Methods-->选择要复写的方法
    protected void onCreate（Bundle savedInstanceState){
        super.onCreate(savedInstanceState);
        setContentView(R.layout.main);    //显示布局文件
        }
    
@3、每个activity都必须要在AndroidMenifest中的application节点中注册
@4、要为activity创建xml布局文件并添加必要的控件（在layout中相应的xml文件中添加）
@5、在activity中用findViewById(R.id.xxx)，返回View类型，需要强制类型转换为控件对应类型，例如
    Button bt=(Button)findViewById(R.id.bt);
    bt.setText("xxx");    //View控件可以设置控件上显示的字符
    
@6、多个activity之间通信，Activity01调用startActivity（Intent intent)跳转到Activity02
    intent对象决定跳转到哪个Activity（Component name)，跳转过去做什么(Action)
    
    
6、Intent意图，请求
@1、一个Intent对象包含了一组信息：
    Component name:决定要启动/操作的组件
    Action：被启动的组件要执行的动作
    Data：组件之间传递的数据
    Category
    Extras：KeyValues键值对，也是要传递的数据
    Flags
@2、Activity之间的跳转
   在Activity01中：
     Intent intent=new Intent();              |---要请求的类
     intent.setClass(Activity01.this  , Activity02.class); //从Activity01跳转到Activity02
                         |--当前类的context对象
     Activity01.this.startActivity(intent);              
@3、数据传递
   在Activity01中发送数据
     intent.putExtra( "key" , value );   //在intent对象中加入键值对
   在Activity02中取得数据(onCreate中）
     Intent intent=getIntent（）；   //得到传递过来的intent对象
     String value=intent.getStringExtra("key");  //通过key获取相应的value
     myTextView.setText(value);   //把获取的value显示出来
     
     
     
@4、intent可以在不同应用之间传递数据，比如说调用短信发送程序
   在Activity01中
   Uri uri=Uri.parse("smsto://110");
   Intent intent=new Intent(Intent.ACTION_SENDTO,uri);
   intent.putExtra("sms_body","The SMS text");
   startActivity(intent);
   
7、Activity中常用控件
(1)TextView是一种文本结果的呈现
   EditText可以让用户输入内容
   Button按钮
@1、要现在layout.xml中定义   <EditText...   >
@2、在对应的Activity中声明为Field，例如：private EditText et_num;
@3、在onCreate中通过ID获取控件对象，要强制类型转换，et_num=（EditText)findViewById(R.id.et_num);
@4、设置显示文本（空间名字），有两种方法：
    a/  et_num.setText(R.string.et_num)可以为控件（包括按钮）来设置显示文本(也可以直接输入文本，但是不利于版本迭代）
    b/  在string.xml中定义字符串,然后在layout.xml中调用
@5、获取EditText控件的值
    String et_num_str=et_num.getText().toString();
@6、将值放入intent(调用putExtra())方法
@7、数据类型转换：
    a/ EditText中用户输入的string转换成计算时需要的int型：int et_num_int=Integer.parseInt(et_num_str);
    b/ setText()中传递的参数必须是string类型，可以写成setText(et_num_int+"");表示传入的是字符串，从而显示数学结果
(2)menu控件
@1、添加menu控件：
    a/ 复写如下方法，当menu按钮被点击时调用此方法
     public Boolean onCreateOptionsMenu(Menu menu){
        menu.add(0,1,1,R.string.exit);       //menu.add(int groupId,int itemId,int order,CharSequence title)添加一个新的菜单项,groupId是menu所在组Id,
        menu.add(0,2,2,R.string.about);      //可以设置为0，itemId是菜单项ID，order是排序，title是按钮/菜单项上显示的内容，可以调用R.string.title
        return super.onCreateOptionsMenu(menu);
     }
    b/ 在Activity中复写onOptionsItemSelected(MenuItem item)方法,当menu中某一个item被点击就会执行此方法
    public boolean onOptionsItemSelected(MenuItem item){
          if(item.getItemId()==1){   //点击exit按钮，退出
              finish();     //调用onDestroy()销毁Activity
              } 
          return super.onOptionsItemSelected(item);
    }
(3)RadioGroup和RadioButton  单选按钮的实现
@1、在布局文件中声明。同一组内的单选按钮只能选其一，所以男、女必须放在一个RadioGroup中
    <RadioGroup
          ...
          android:orientation="vertical">
          <RadioButton .../>
          <RadioButton .../>
     </RadioGroup>
@2、在Activity中声明控件对象：
     private RadioGroup genderGroup=null;
     private RadioButton femaleButton=null;
     private RadioButton maleButton=null;
@3、在onCreate中获取控件对象
     genderGroup=（RadioGroup）findViewById(R.id.genderGroup);...
@4、为RadioGroup设置监听器,则当这个group中任意一个单选按钮被点击都会触发下面的监听器
     genderGroup.setOnCheckedChangeListener(new RadioGroup.OnCheckedChangeListener(){    //用匿名内部类传入一个监听器对象
          //要复写如下方法。触发监听器之后会给如下方法传入被点击对象所在组对象、被点击对象的ID
          public void onCheckedChanged（RadioGroup group，int checkedId){
               if(femaleButton.getId()==checkedId){
                   System.out.println("female");      //可以在eclipse的LogCat中去logTag为System.out的filter来查看
                   Toast.makeText(RadioTest.this,"female",Toast.LENGTH_SHORT).show();
               }else if(maleButton.getId()==checkedId){
                   System.out.println("male");
               }
           }
      });
               
(4)CheckBox     多选按钮的实现
@1、在布局文件中声明，因为是多选，所以直接套入布局中
   <LinearLayout...
      <CheckBox .../>    //配置同RadioButton和TextView，有id,layout_width,text等
        ...
      <CheckBox .../>
   </LinearLayout>
@2、声明和获取参考RadioGroup
@3、CheckBox没有组的概念，每一个CheckBox都要设置监听器

(5)Toast的基本用法

    
    

8、内部类    可以直接使用外部类的成员变量，也可以直接调用外部类的成员函数，也能调用外部类对象
9、监听器
@1、使用内部类：
    a、 定义内部类class mbt implement OnClickListener,然后复写public void onClick(View v){}，在里面处理按钮按下后的操作
    b、 在外部类的onCreate中给Button对象捆绑监听器：Button myButton.setOnClickListener(new mbt());
@2    

10、layout的XML文件
@1、<!--注释--->
@2、每个布局/控件必须设置：layout_width/layout_height="fill_parent"表示宽度填满父控件，wrap_content表示包裹内容
@3、LinearLayout中：
    a/ orientation是设置线性布局的方向，horizontal水平，vertical垂直
    b/ gravity---智鼎空间的位置：center、right、center_vertical等
    c/ background---控件背景色，RGB
    d/ padding---指定控件内边距(这个直接设置四边）(内容和所在控件的边框距离）
    e/ margin---指定控件外边距（边框往外的距离）
@4、TableLayout:
    a/android:stretchColumes="0"  ---当所有列内容不足以填满父控件，拉伸第一列的宽度
    b/<TableRow>..</TableRow>
@5、RelativeLayout中子控件的属性设置：
    a/ layout_above/layout_below在给定ID控件之上/下
    b/ layout_toLeftOf/layout_toRightOf 将该控件的右边缘和给定ID的控件的左边缘对齐 （左右关系）
    c/ layout_alignBaseline/alignBottom/alignLeft/alignRight/alignTop该控件的baseline和给定ID的控件的baseline对齐
    d/ alignParentBottom/Left/Right/Top="true" 该控件的底部和父控件的底部对齐
    e/ layout_centerHorizontal/centerInParent/centerVertical="true"该控件将被至于水平方向的中央
@5、TextView：
    a/ text----控件上显示的文本
    b/ textSize---控件上文本的字体大小
    c/ singleLine---true/false文本内容是否在一行中显示
    d/ layout_weight="2"----在父控件中占总份数的2份（以父控件为标准计算，但还要参考layou_width的参数）
    e/ 如果每个定义了layout_width="wrap_content",则内容越多的占据控件越多

11、Activity生命周期
@1、启动一个新的Activity（第一个）：first.onCreate()-->first.onStart()-->first.onResume()
@2、onCreate()当Activity第一次被创建时会被调用
@3、onStart()当Activity可以被用户看到的时候（绘制Activity）
@4、onResume()当Activity获得用户焦点时（用户可以在Activity的空间上操作）
@5、启动第二个Activity：first.onPause()-->second.onCreate()-->second.onStart()-->second.onResume()-->first.onStop()
@6、onPause()当第二个Activity遮挡了第一个Activity(可见但不可操作）时；此函数中代码的作用是保存当前Activity的数据
@7、onStop()当Activity完全不可见时
@8、点击Back键回到第一个Activity：second.onPause()-->first.onRestart()-->first.onStart()-->first.onResume()-->second.onStop()-->second.onDestory()
@9、onRestart()当Activity重新得到用户焦点（firstActivity并没有被销毁，不需要重新创建，所以不是onCreate）
@10、onDestroy()销毁Activity。当代码中调用finish（）方法或系统资源不够用时会调用此方法销毁Activity

12、对话框/窗口风格的Activity
@1、在AndroidManifest.xml中添加theme语句
     <activity  android:theme="@android:style/Theme.Dialog"/>
@2、如果设置了secondActivity为对话框风格，则由第一个启动第二个Activity时如下，不会调用第一个activity的onStop()
    first.onPause()-->second.onCreate()-->second.onStart()-->second.onResume()
    因为firstActivity还是可见，只是不能获取焦点
@3、secondActivity以对话框形式浮在firstActivity之上，点击back：
    second.onPause()-->first.onResume()(只需要重新获得焦点，而不需要重新绘制Activity）
@4、资源不够用时，调用过onPause、onStop、onDestroy方法的Activity会被kill掉
13、Task基本概念
@1、A task is a stack of activities.task就是activity栈（后进先出）
@2、应用程序启动后，firstActivity被压入stack中；每次startActivity,新activity会被压入stack顶，之前的activity被压入栈下；显示的永远是stack顶部的activity
@3、点击back按钮，栈顶的activity被弹出，栈中的activity上移
@4、startActivity之后紧接着finish(),则当前Activity不是被压到栈底而是直接销毁，同时进入新的activity；之后back键不能回到当前Activity
@5、stack只有弹出和压入两个动作，不能重新排序
