$ git config --global user.name "Your Name"             sunny7U
$ git config --global user.email "email@example.com"           126邮箱
注意:git config命令的--global参数，用了这个参数，表示你这台机器上所有的Git仓库都会使用这个配置，
     当然也可以对某个仓库指定不同的用户名和Email地址。


一、创建版本库并添加文件
1、创建用于做git仓库的目录/文件夹,并进入该目录
$ mkdir learngit
$ cd learngit
$ pwd                              //用于查看当前所在目录
     /Users/michael/learngit
$ git init                         //.git是仓库中新生成的文件夹，默认隐藏
     Initialized empty Git repository in /Users/michael/learngit/.git/
& ls -ah                           //可以看到.git
     .   ..    .git

2、编写一个readme.txt.一定要放在git仓库目录learngit下
$ touch readme.txt                 //新建一个readme.txt文件
$ vi readme.txt                    //修改内容如下
     Git is a version control system.
     Git is free software.
此时如果查看工作区状态（git status),readme.txt的状态是Untracked（因为它还没有被add)
3、添加并提交文件到git版本库，可以多次add,一次commit
$ git add readme.txt                   
$ git commit -m "wrote a readme file"       //-m 后面是对文件的描述
     [master (root-commit) cb926e7] wrote a readme file    //cb926e7就是版本1的commitID头几位
     1 file changed, 2 insertions(+)
     create mode 100644 readme.txt
     
三、查看工作区状态，提交修改后文件
1、修改readme.txt:
Git is a distributed version control system.
Git is free software.
2、查看工作区状态
$ git status
     # On branch master
     # Changes not staged for commit:         //修改还没有被提交
     #   (use "git add <file>..." to update what will be committed)
     #   (use "git checkout -- <file>..." to discard changes in working directory)
     #
     #    modified:   readme.txt                //文件被修改
     #
     no changes added to commit (use "git add" and/or "git commit -a") //没有准备被提交的修改 
3、查看具体修改了什么内容    
$ git diff readme.txt     //查看的是工作区内文本的变化
     diff --git a/readme.txt b/readme.txt
     index 46d49bf..9247db6 100644      
     --- a/readme.txt
     +++ b/readme.txt
     @@ -1,2 +1,2 @@
     -Git is a version control system.   //删除了这一行
     +Git is a distributed version control system. //增加了这一行（差别就是distributed)
      Git is free software.   //这一行不变
      
4、添加文件到版本库的暂存区
$ git add readme.txt
$ git status
    # On branch master
    # Changes to be committed:    //修改待提交
    #   (use "git reset HEAD <file>..." to unstage) //提示可以用reset命令退回
    #       modified:   readme.txt

5、将暂存区的文件提交到master分支
$ git commit -m "add distributed"
    [master ea34578] add distributed   //ea34578是版本2的commitID的前几位
    1 file changed, 1 insertion(+), 1 deletion(-)
$ git status
    # On branch master
    nothing to commit (working directory clean)  //没有需要提交的修改，工作区很干净
    
四、版本之间的切换
1、再次修改readme.txt:
Git is a distributed version control system.
Git is free software distributed under the GPL.
2、添加并提交
$ git add readme.txt
$ git commit -m "append GPL"
     [master 3628164] append GPL
     1 file changed, 1 insertion(+), 1 deletion(-)
    
3、查看版本记录
$ git log      //输出从最近到最远的版本信息，-pretty=oneline参数可以使得输出信息更简洁
     commit 3628164fb26d48395383f8f31179f24e0882e1e0     //版本号（当前版本）
     Author: Michael Liao <askxuefeng@gmail.com>         //提交人
     Date:   Tue Aug 20 15:11:49 2013 +0800              //提交时间

         append GPL                                       //修改描述

     commit ea34578d5496d7dd233c827ed32a8cd576c5ee85
     Author: Michael Liao <askxuefeng@gmail.com>
     Date:   Tue Aug 20 14:53:12 2013 +0800

         add distributed

     commit cb926e7ea50ad11b8f9e909c05226233bf755030
     Author: Michael Liao <askxuefeng@gmail.com>
     Date:   Mon Aug 19 17:51:55 2013 +0800

         wrote a readme file

4、退回当前版本之前的版本
在Git中，用HEAD表示当前版本（最新版本），也就是最新的提交3628164，
上一个版本就是HEAD^，上上一个版本就是HEAD^^，往上100个版本写成HEAD~100

$ git reset --hard HEAD^   //--hard很重要
     HEAD is now at ea34578 add distributed
如果没有--hard参数，则提示
     Unstaged changes after reset:   //表示暂存区的修改撤销掉，重新放回工作区
     M             readme.txt
此时cat readme.txt还是append GPL版本 ，但git log却显示当前版本是add distributed

5、进入当前版本之后的版本（未来模式）
通过前面的log找到你需要版本的commitID，头几位即可
$ git reset --hard 3628164
     HEAD is now at 3628164 append GPL       //回到append GPL版本
     
6、找不到之前的log,可以查看版本修改记录
$ git reflog           //每条记录前面的字符串就是该次版本号
     ea34578 HEAD@{0}: reset: moving to HEAD^   //第四次，退回版本2
     3628164 HEAD@{1}: commit: append GPL       //第三次，修改得到版本3
     ea34578 HEAD@{2}: commit: add distributed  //第二次，修改得到版本2
     cb926e7 HEAD@{3}: commit (initial): wrote a readme file  //第一次，创建版本1
 

五、管理修改
每次修改之后一定要add,否则新的修改将停留在工作区，只有被add到暂存区stage中的修改才会通过commit进入分支
例子如下所示：
$ cat readme.txt                           //修改为第四版
     Git is a distributed version control system.
     Git is free software distributed under the GPL.
     Git has a mutable index called stage.
     Git tracks changes.                    //新修改
      
$ git add readme.txt
$ git status
     # On branch master
     # Changes to be committed:               //需要commit，说明修改记录已经在stage中了
     #   (use "git reset HEAD <file>..." to unstage)
     #
     #       modified:   readme.txt#
$ cat readme.txt                       //修改为第五版
     Git is a distributed version control system.
     Git is free software distributed under the GPL.
     Git has a mutable index called stage.
     Git tracks changes of files.    //改动之处

$ git commit -m "git tracks changes"   //没有add,直接commit，则只有第四版从stage进入master
     [master d4f25b6] git tracks changes
     1  file changed, 1 insertion(+)

$ git status
     # On branch master
     # Changes not staged for commit:      //修改内容还没有add到进入暂存区stage
     #   (use "git add <file>..." to update what will be committed)
     #   (use "git checkout -- <file>..." to discard changes in working directory)
     #       modified:   readme.txt
     no changes added to commit (use "git add" and/or "git commit -a")  //暂存区没有可以提交的修改内容
 
$ git diff HEAD -- readme.txt  //对比版本库里最新版本（HEAD)和工作区内容（readme.txt)的区别
     diff --git a/readme.txt b/readme.txt
     index 76d770f..a9c5755 100644
     --- a/readme.txt
     +++ b/readme.txt
     @@ -1,4 +1,4 @@
      Git is a distributed version control system.
      Git is free software distributed under the GPL.
      Git has a mutable index called stage.
     -Git tracks changes.
     +Git tracks changes of files.
此时只能再次git add,然后git commit


六、撤销修改
$ git checkout -- readme.txt     //修改没有add之前，可以丢弃/撤销工作区的修改
$ git reset HEAD readme.txt      //修改还没有commit，把add到暂存区的修改撤销掉（unstage),重新放回工作区
$ git reset --hard HEAD^         //修改已经commit（还没有从本地库推送到远程），只能回退上一版本

七、删除文件
$ rm test.txt      //删除也是一种修改  rm只是从工作区删除
1、接下来可以选择更彻底得删除（其实master中仍然会有，只是HEAD指针移向了删除版本
$ git rm test.txt      //从版本库的暂存区stage中删除，master中还有。如果没有commit,还能够
     rm 'test.txt'     //通过git reset HEAD test.txt,git checkout LICENSE.txt这两条命令恢复到工作区
$ git commit -m "remove test.txt"  //提交“删除”这项修改记录
     [master d17efd8] remove test.txt  
     1 file changed, 1 deletion(-)
     delete mode 100644 test.txt
  如果此时还想恢复文件，可以通过git reflog找到test.txt文件存在时的版本号，然后用git reset --hard [commitID]来恢复   
2、或者删错了，可以选择从版本库恢复
$ git checkout -- test.txt     //checkout是用版本库里的文件替换工作区



八、远程仓库之链接本地Git库和GitHub仓库
1、创建SSH Key      //用于让GitHub识别出提交人身份
$ ssh-keygen -t rsa -C "youremail@example.com"    //如果顺利，可以在用户主目录（C:/Users/Administrator/)里找到.ssh目录，里面有id_rsa和id_rsa.pub两个文件，即SSH Key的秘钥对，id_rsa是私钥，不能泄露出去，id_rsa.pub是公钥，无需保密。

2、登录GitHub,设置SSHkey.  详见廖雪峰GIT教程之远程仓库
http://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/001374385852170d9c7adf13c30429b9660d0eb689dd43a000

3、在GitHub上建立一个新仓库叫learngit

4、关联本地仓库和远程仓库，远程库的名字就是origin
$ git remote add origin git@github.com:[GitHub账户名]/learngit.git

5、把本地库的所有内容推送到远程库上（首次使用有警告）
$ git push -u origin master   //推送的是本地当前分支master。-u表示把远程库的master和本地的master关联起来

6、之后本地做了修改后通过如下命令推送即可
$ git push origin master

7、如果需要从远程库克隆到本地库，就先进入本地git仓库目录
$ $ git clone git@github.com:[GitHub账户名]/[需要被克隆的远程仓库名].git     

范例如下：
$ git clone git@github.com:michaelliao/gitskills.git
然后就能在本地git目录下看到gitskills目录了

     
